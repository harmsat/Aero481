%% Initialization
clc
clear
close all

%% Adjustable Parameters
M =.85;                         % Flight Mach number
Cruise_alt = 55000;             % ft

Sland = 4956;                   % Landing Runway Length (ft)
MTOW = 74171;                   % Takeoff Weight (lbs)

Sref = 1140;                    % Wing area (ft^2)
AR = 7.4;                       % Aspect Ratio

Clmax_to = 1.8;
Clmax_land = 2.1;

%% Math Zone

[p, P, T] = Standard_Atmosphere(Cruise_alt);

p_cruise = p;
V_cruise = M * sqrt(1.4*1716*T); % ft/s? 

Swet = 10^.2263*MTOW^.6977; %regression coefficients for exponents

Cfe = .003;
Cdo = Cfe*Swet/Sref;
Cdo = [.015+.02, .015+.02, .015, 0, .065+.02,.065+.02]+Cdo;

vector = ones(1,1001); % Makes somthing a 1001 long vector.

G =  [1.3,   .1,  2.5,  1.3,  3.3,  2.2]/100;
ks = [1.2,  1.15, 1.2,  1.25, 1.3,  1.5];
e =  [ .775  .775  .825  .825  .725  .725];
%      1     2     3     4     5     6       <- Climb #

Const = pi*AR.*e;
CL = [Clmax_to, Clmax_to, .9, .9, Clmax_land, Clmax_land];
CD = Cdo + CL.^2./Const;

TW = (0:.5/1000:.5);
WS = (0:350/1000:350);

p = 0.002153;        % Takeoff air density (slugs)
p_sl = 0.0023769;    % air density at sea level (slugs)

M_ff = [0.99   0.995 0.995   0.98  0.692  0.9753 0.99    0.9606      0.992]; 
%       Warmup Taxi  Takeoff Climb Cruise Loiter Descent Alternative Landing

%% Landing field Length
Sa = 800; % intermediate value between airliners and general aviation
Landing = (((p./p_sl).*Clmax_land)./(80*.65)).*(Sland*.6 - Sa).*vector;

%% Takeoff
TOP = Sland/37.5;
Takeoff = WS./((p./p_sl).*Clmax_to.*TOP);

%% CLimb
Climb = ks.^2 ./ (CL).*Cdo+CL./(ks.*pi.*AR.*e)+G;
Climb = Climb .* ones(1001,1);
Cor = (1/.8)*(1/.94)*(2);
TWConvert = [M_ff(1)*M_ff(2)                            %1
             M_ff(1)*M_ff(2)                            %2
             M_ff(1)*M_ff(2)                            %3
             M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)            %4
             M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)    %5
             M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)]'; %6

Climb = Climb .* Cor .* TWConvert;
                  
%% Ceiling
Ceiling = 2*sqrt(Cdo(4)/(pi*AR*e(4))) .* vector;

%% Cruise
q = (1/2)*p_cruise*V_cruise^2;
Cruise = (q.*Cdo(4)./WS) + WS.*(1./(q.*pi.*AR.*e(4)));
ThrustScale = .55*(p_sl ./ p_cruise)^.6;   % Thrust Scaling Factor
Cruise = Cruise .* ThrustScale .*(M_ff(1)* M_ff(2)* M_ff(3)* M_ff(4));

%% Plotting
figure(1)
hold on
plot(WS, Takeoff, 'b')

    i = round(numel(WS)/1.5)-530;

    % Get the local slope
    d = (Takeoff(i+1)-Takeoff(i))/(WS(i+1)-WS(i));
    X = diff(get(gca, 'xlim'));
    Y = diff(get(gca, 'ylim'));
    p = pbaspect;
    a = atan(d*p(2)*X/p(1)/Y)*180/pi;

    % Display the text
    text(WS(i), Takeoff(i), 'Takeoff', 'BackgroundColor', 'w', 'color', 'b', 'rotation', a*2);

plot(Landing, TW, 'k')

    i = round(numel(Landing)/1.5)-500;

    % Get the local slope
    d = (TW(i+1)-TW(i))/(Landing(i+1)-Landing(i));
    X = diff(get(gca, 'xlim'));
    Y = diff(get(gca, 'ylim'));
    p = pbaspect;
    a = atan(d*p(2)*X/p(1)/Y)*180/pi;

    % Display the text
    text(Landing(i), TW(i), 'Landing', 'BackgroundColor', 'w', 'color', 'k', 'rotation', a);


plot(WS, Cruise,'r')

    i = round(numel(WS)/8);

    % Get the local slope
    d = (Cruise(i+1)-Cruise(i))/(WS(i+1)-WS(i));
    X = diff(get(gca, 'xlim'));
    Y = diff(get(gca, 'ylim'));
    p = pbaspect;
    a = atan(d*p(2)*X/p(1)/Y)*180/pi;

    % Display the text
    text(WS(i), Cruise(i), 'Cruise', 'BackgroundColor', 'w', 'color', 'r');% 'rotation', a);

plot(WS, Climb(:,1), 'g')
text(WS(100), Climb(100, 1), 'Climb 1', 'BackgroundColor', 'w', 'color', 'g');
plot(WS, Climb(:,2), 'm')
text(WS(100), Climb(180, 2), 'Climb 2', 'BackgroundColor', 'w', 'color', 'm');
plot(WS, Climb(:,3), 'color', '[1 .5 0]')
text(WS(300), Climb(300, 3), 'Climb 3', 'BackgroundColor', 'w', 'color', '[1 .5 0]');
plot(WS, Climb(:,4), 'color', '[.5 0 1]')
text(WS(400), Climb(400, 4), 'Climb 4', 'BackgroundColor', 'w', 'color', '[.5 0 1]');
plot(WS, Climb(:,5), 'color', '[.2 .2 .8]')
text(WS(600), Climb(600, 5) - .001, 'Climb 5', 'BackgroundColor', 'w', 'color', '[.2 .2 .8]');
plot(WS, Climb(:,6), 'color', '[.8 .2 .2]')
text(WS(400), Climb(500, 6), 'Climb 6', 'BackgroundColor', 'w', 'color', '[.8 .2 .2]');
plot(WS, Ceiling, 'color', '[.2 .8 .2]')
text(WS(600), Ceiling(600), 'Ceiling', 'BackgroundColor', 'w', 'color', '[.2 .8 .2]');

area(min(WS, Landing), max(Cruise, Climb(1,6)) ,.5,  'EdgeColor', 'none', 'FaceColor', [0 .5 .8]);

plot(Landing(1,1), Climb(1,6), 'k+', 'LineWidth', 2);
text(Landing(1,1)+4, Climb(1,6)+.005, 'Design Point');

xlabel('W/S (lb/ft^2)')
ylabel('T/W')
axis([0,350,0,.5])

%% Drag Polar Plot 
%Raymr for a business jet 
ws = 80.6; 
Cf = 0.003;
f = Cf*Swet;
S = MTOW/ws;
CDoClean = f/S;
eClean = 0.825;
CDoTOFup = CDoClean + 0.10;
CDoTOFdown = CDoClean + 0.10 + 0.015;
eTOF = 0.7725;
CDoLFup = CDoClean + 0.055;
CDoLFdown = CDoClean + 0.055 + 0.015;
eLF = 0.7225;

CL = -2:0.005:2;
CDClean = CDoClean + CL.^2./(pi*AR*eClean);
CDTOFup = CDoTOFup + CL.^2./(pi*AR*eTOF);
CDTOFdown = CDoTOFdown + CL.^2./(pi*AR*eTOF);
CDLFup = CDoLFup + CL.^2./(pi*AR*eLF);
CDLFdown = CDoLFdown + CL.^2./(pi*AR*eLF);

LoD = max(CL./CDClean);

figure 
hold on 
plot(CDClean,CL)
plot(CDTOFup, CL)
plot(CDTOFdown, CL)
plot(CDLFup, CL)
plot(CDLFdown, CL)
xlabel('CD')
ylabel('CL')
legend('Clean','T0 - F Up', 'TO - F Down', 'L - F Up', 'L - F Down')


%% TS
Climb = Climb';
TWWS = [Takeoff;Cruise];

ClimbCoe = [0.3487, 0.3189, 0.2773, 0.1782, 0.3644, 0.3677, 0.0481];

Tnew = 17745*2;
Surface = 75:1:1600;
dt = 0.1;
Thrust = ones(1,1001);
%Climbs
for n = 1:7
    for i = 1:length(Surface)
        Swing = Surface(i);
        converge = 0;
        Thrust(i) = Tnew;
        while converge == 0
            W0 = WeightEstimate(Swing,Thrust(i));
            TWnew = ClimbCoe(n);
            Tnew = TWnew.*W0;
            if abs(Thrust(i)-Tnew) < dt
                converge = 1;
            else
                Thrust(i) = Tnew;
            end
        end
    end
    C(n,:)= Thrust;
end

%Cruise
    Cr = ones(1,length(Surface));
for i = 1:length(Surface)
    Tnew = 17745*2;
    Swing = Surface(i);
    converge = 0;
    Cr(i) = Tnew;
    while converge == 0
        W0 = WeightEstimate(Swing,Cr(i));
        W0S0 = W0/Swing; 
        xold = 1000;
        for j = 1:length(WS)
            x = abs(WS(j)-W0S0);
            if xold > x
                TWnew = TWWS(2,j);
            else
                xold = x;
            end
        end
        Tnew = TWnew.*W0;

        if abs(Cr(i)-Tnew) < dt
            converge = 1;
        else
            Cr(i) = Tnew;
        end
    end
end

% Takeoff
Thrust = linspace(1000,100000,1001);

Snew = 908.67;
Sur = ones(1,1001);
for i = 1:length(Thrust)
    T = Thrust(i);
    converge = 0;
    Sur(i) = Snew;
    while converge == 0
        W0 = WeightEstimate(Sur(i),T);
        T0W0 = T/W0;
        %WSnew = ;
        xold = .05;
        for j = 1:length(Takeoff)
            x = abs(Takeoff(j)-T0W0);
            if xold > x
                WSnew = WS(j);
            else
                xold = x;
            end
        end
        Snew = W0./WSnew;
        if abs(Sur(i)-Snew) < dt
            converge = 1;
        else
            Sur(i) = Snew;
        end
    end
    WeightEstimate(Sur(i),T);
end
 TTO = Thrust;
 STO = Sur;
Thrust = linspace(0,100000,1001);
% Landing
Snew = 908.67;
for i = 1:length(Thrust)
    T = Thrust(i);
    converge = 0;
    Sur(i) = Snew;
    while converge == 0
        W0 = WeightEstimate(Sur(i),T);
        WSnew = 80.3607;
        Snew = W0./WSnew;
        if abs(Sur(i)-Snew) < dt
            converge = 1;
        else
            Sur(i) = Snew;
        end
    end
end
Tlan = Thrust;
Slan = Sur;
LD = CL./CDClean;

% A = linspace(75, 1600,1526);
% B = linspace(0, 10000,1526);
% [A, B] = meshgrid(A,B);

%Cd0TS = Cf.*Swet./A;
%CDTS = Cd0TS+CL.^2./(pi().*AR.*eClean);

figure(3)
hold on
plot(Surface,C,Surface,Cr,'r',Slan,Tlan,'k',STO,TTO,'m','LineWidth',1)
%plot(Surface,C,Surface,Cr,'k',STO,TTO,'m','LineWidth',1)
axis([146,1600, 0, 50000])
legend('Climb 1', 'Climb 2', 'Climb 3', 'Climb 4', 'Climb 5', 'Climb 6', 'Ceiling', 'Cruise', 'Landing', 'Takeoff')
xlabel('S [ft^2]')
ylabel('T [lb]')

%area(min(TTO, Tlan), Surface,.5,  'EdgeColor', 'none', 'FaceColor', [0 .5 .8]);

%% Fuel-burn contours 
%Estimate L/D using drag polar graph 
%Parasidic drag can be estimated for function of wing area: Cdo = Cf*Swet/S
%Computing required fuel rate: R = V/c * L/D * ln(W2/W3)
%V = speed, c = SFC 
%define array of thrust and wing areas. for every combination compute the
%fuel weight. Plot contours

%using drag polar graph, CL ~ 0.5150, CD ~ 0.0276
%Is this realistic?
%CL./CDOClean(504) is max LD
Cf = 0.003; %Based on Raymer
sfc = 0.5; %specific fuel consumption
CDoClean = Cf*Swet./Sur;
CD = CDoClean + 0.0276;
CL = 0.5150; %*ones(1, length(CD));
drag = (CD./CL)*W0; %L/D = CL/CD 
thrust = drag; %in cruise
Range = 5500; %[nmi]
% W2W3 = exp(Range./((V_cruise/sfc).*(CL./CD))); 
%^values are greater than 1... Equation not really needed?

%Array of thrust numbers; how to make thrust and Sref dependent?
%TSFC = mdotFuel/Thrust --> mdotFuel = Thrust*TSFC
%mdotFuel [kg/s], so Range [distance]/speed[distance/time] = time needed
%for fuel. 
%In cruise, Thrust = Drag
% mDotFuel = thrust.*sfc;
% fuelWeight = mDotFuel.*(Range/V_cruise);
%Fuel weight actually makes a *lot* of sense! 
%Now to make contour lines?

FuelWeight = ones(500,500);

for S_loop = 1:(5000/10)
    for T_loop = 1:(50000/100)
        
        W0_loop = WeightEstimate(T_loop*100,S_loop*10);
        Swet = 463025/144 + 2*S_loop*10;                      %regression coefficients for exponents
        CD0_ = Cf*Swet/(S_loop*10);
        CD_ = (CD0_ + ((CL)^2 / (pi * 12.1 * e(4))));
        V_cruise = ((2*T_loop*100)/(.0002843*S_loop*10*CD_))^.5;
        W2W3 = exp(Range*6076/((V_cruise/(sfc/60/60))*(CL/CD_)));
        FuelWeight(T_loop,S_loop) = (W2W3*W0_loop)-W0_loop;
 
        if FuelWeight(T_loop,S_loop) > 1000000
            FuelWeight(T_loop,S_loop) = 1000000;
        end
    end
end
T = 1:100:50000;
S = 1:10:5000;

%[T, S] = meshgrid(T,S);

v = [19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]*1000;

contour(S,T,FuelWeight,v,'ShowText','on')
